{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\NontakornKhanaphol\\\\Documents\\\\Nontakorn-joe\\\\Dev\\\\Git-Hub\\\\monitor-all\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\n/* eslint-disable no-unused-vars */\n\nimport React, { useState, useEffect } from \"react\";\nimport Monitor1 from \"../components/monitor1\";\nimport Monitor2 from \"../components/monitor2\";\nimport Monitor3 from \"../components/monitor3\";\nimport \"../assets/monitor1.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [webSocketData, setWebSocketData] = useState(null);\n  // Connect to WebSocket server\n  useEffect(() => {\n    const ws = new WebSocket(\"ws://localhost:\" + process.env.REACT_APP_PORT);\n    console.log(\"WebSocket :\", ws);\n    ws.onclose = () => {\n      console.log(\"WebSocket connection closed\");\n    };\n    ws.onopen = () => {\n      console.log(\"WebSocket connection opened\");\n    };\n    if (ws.readyState === WebSocket.CLOSED) {\n      console.log(\"WebSocket connection closed before it was established\");\n    }\n    return () => {\n      ws.close();\n    };\n  }, []);\n  useEffect(() => {\n    const fetchData1 = () => {\n      // Implement your logic to fetch data here\n      console.log(\"Fetching data from server...\");\n    };\n    const intervalId = setInterval(fetchData1, 2000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // useEffect(() => {\n  //   const refreshPage = () => {\n  //     window.location.reload();\n  //   };\n\n  //   const timeoutId = setTimeout(refreshPage, 30000);\n\n  //   return () => clearTimeout(timeoutId);\n  // }, []);\n\n  useEffect(() => {\n    const handleMessage = event => {\n      const data = JSON.parse(event.data);\n      setWebSocketData(data);\n      // console.log('set :',data)\n    };\n\n    if (webSocketData) {\n      const ws = new WebSocket(\"ws://localhost:\" + process.env.REACT_APP_PORT);\n      ws.onmessage = handleMessage;\n      return () => {\n        ws.close();\n      };\n    }\n  }, [webSocketData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Monitor1, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Monitor2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Monitor3, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xvQjqs10l4nnZwZswdHIDvFD30c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Monitor1","Monitor2","Monitor3","jsxDEV","_jsxDEV","App","_s","webSocketData","setWebSocketData","ws","WebSocket","process","env","REACT_APP_PORT","console","log","onclose","onopen","readyState","CLOSED","close","fetchData1","intervalId","setInterval","clearInterval","handleMessage","event","data","JSON","parse","onmessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/NontakornKhanaphol/Documents/Nontakorn-joe/Dev/Git-Hub/monitor-all/frontend/src/pages/Home.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nimport Monitor1 from \"../components/monitor1\";\r\nimport Monitor2 from \"../components/monitor2\";\r\n\r\nimport Monitor3 from \"../components/monitor3\";\r\n\r\nimport \"../assets/monitor1.css\";\r\n\r\n\r\nfunction App() {\r\n  const [webSocketData, setWebSocketData] = useState(null);\r\n  // Connect to WebSocket server\r\n  useEffect(() => {\r\n    const ws = new WebSocket(\"ws://localhost:\" + process.env.REACT_APP_PORT);\r\n\r\n    console.log(\"WebSocket :\", ws);\r\n\r\n    ws.onclose = () => {\r\n      console.log(\"WebSocket connection closed\");\r\n    };\r\n\r\n    ws.onopen = () => {\r\n      console.log(\"WebSocket connection opened\");\r\n    };\r\n\r\n    if (ws.readyState === WebSocket.CLOSED) {\r\n      console.log(\"WebSocket connection closed before it was established\");\r\n    }\r\n\r\n    return () => {\r\n      ws.close();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData1 = () => {\r\n      // Implement your logic to fetch data here\r\n      console.log(\"Fetching data from server...\");\r\n    };\r\n\r\n    const intervalId = setInterval(fetchData1, 2000);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const refreshPage = () => {\r\n  //     window.location.reload();\r\n  //   };\r\n\r\n  //   const timeoutId = setTimeout(refreshPage, 30000);\r\n\r\n  //   return () => clearTimeout(timeoutId);\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    const handleMessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      setWebSocketData(data);\r\n      // console.log('set :',data)\r\n    };\r\n\r\n    if (webSocketData) {\r\n      const ws = new WebSocket(\"ws://localhost:\" + process.env.REACT_APP_PORT);\r\n      ws.onmessage = handleMessage;\r\n\r\n      return () => {\r\n        ws.close();\r\n      };\r\n    }\r\n  }, [webSocketData]);\r\n  return (\r\n    <div className=\"container\">\r\n      <Monitor1 />\r\n      <br />\r\n      <Monitor2 />\r\n      <br />\r\n      <Monitor3 />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}